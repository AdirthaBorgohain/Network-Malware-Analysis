from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import confusion_matrix
import joblib
import pandas as pd
import numpy as np

DATA_DIR = '../aws/'
JOBLIB_DIR = '../joblibs/'
FEATURE_NO = 36

def load_data(filename):
    df = pd.read_csv(DATA_DIR + filename, low_memory=False)

    df.drop_duplicates(inplace=True)

    df = df[df['Flow Byts/s'] != 'Infinity']
    df['Flow Byts/s'] = pd.to_numeric(df['Flow Byts/s'])

    df = df[df['Flow Pkts/s'] != 'Infinity']
    df['Flow Pkts/s'] = pd.to_numeric(df['Flow Pkts/s'])

    df.drop(['Timestamp'], inplace=True, axis=1)

    labels = list(df.Label.unique())
    labels.remove('Benign')
    df['Label'] = df['Label'].replace(labels, 'Malware')

    X = df.iloc[:, :78]
    y = df['Label']

    le = joblib.load(JOBLIB_DIR + 'label_encoder.joblib')
    y = le.fit_transform(y)

    cols = joblib.load(JOBLIB_DIR + 'col_rank.joblib')

    columns = X.columns

    scalar = joblib.load(JOBLIB_DIR + 'scaler.joblib')
    X = scalar.transform(X)

    X = pd.DataFrame(X, columns=columns)

    sel_cols = sel_cols = cols[:FEATURE_NO]

    X = X[sel_cols]

    return X, y


def predict(X):
    xgbmodel = joblib.load(JOBLIB_DIR + 'xgbmodel.joblib')
    cbmodel = joblib.load(JOBLIB_DIR + 'cbmodel.joblib')
    lgbmodel = joblib.load(JOBLIB_DIR + 'lgbmodel.joblib')

    xgb_pred_prob = xgbmodel.predict_proba(X)

    cb_pred_prob = cbmodel.predict_proba(X)

    lgb_pred_prob = lgbmodel.predict(X)
    
    ensemble_df = pd.DataFrame(list(zip(xgb_pred_prob[:, 1], cb_pred_prob[:, 1], lgb_pred_prob)), \
        index=X.index, columns=['xgb_preds', 'cb_preds', 'lgb_preds'])

    model = joblib.load(JOBLIB_DIR + 'model.joblib')
    y_pred = model.predict(ensemble_df)

    return xgb_pred_prob, cb_pred_prob, lgb_pred_prob, y_pred


def convert_prob_to_class(probs):
    preds = list()
    for i in range(0, len(probs)):
        if probs[i] >= 0.5:
            preds.append(1)
        else:
            preds.append(0)
    
    return preds


def get_confusion_matrix(y_truth, y_preds):
    return confusion_matrix(y_truth, y_preds)

